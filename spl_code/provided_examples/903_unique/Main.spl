/*
This example is the same code that can be found in the SPL introductory tutorial PDF file.
Please see that PDF file for a description about what this application does.
*/
use my.util::Uniq;

composite Main {
	type
		KeyType = tuple <int32 j>;
	
	graph
		stream <int32 i, int32 j> All = Beacon() {
			logic
				state: mutable int32 n = 0;
				
			param
				iterations: 10u;
				
			output	All: 
				i = ++n, j = n/3;
		} // End of Beacon.
		
		stream <All> Some = Uniq(All) {
			param
				key: KeyType;
		} // End of Uniq.
		
		() as PrintAll = Custom(All) {
			logic
				state: mutable int32 err = 0;
				
				onTuple All	: {
					printString("All " + (rstring)All + "\n");
					spl.file::fflush (0ul, err);
				} // End of onTuple All
		} // End of Custom(All)
		
		() as PrintSome = Custom(Some) {
			logic	
				state: mutable int32 err = 0;
				
				onTuple Some: {
					printString("Some " + (rstring)Some + "\n");
					spl.file::fflush (0ul, err);
				} // End of onTupe Some
		} // End of Custom(Some)	
		
		config
			logLevel		: error;	
			// You have to change this hostname with a hostname that is valid on your network.
			placement		: host("localhost");
} // End of composite Main
